{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(){\n        this.state = [\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n        this.moved = false;\n        this.nextCellId = 1;\n    }\n    getState() {\n        return this.state;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    moveLeft() {\n        const stateCopy = this.state.map((row)=>{\n            return row.map((cell)=>cell ? {\n                    ...cell\n                } : null);\n        });\n        const transitions = [];\n        this.moved = false;\n        for(let i = 0; i < stateCopy.length; i++){\n            const merged = [\n                false,\n                false,\n                false,\n                false\n            ];\n            for(let j = 0; j < stateCopy[i].length; j++){\n                if (stateCopy[i][j] === null) continue;\n                let k = j;\n                while(k > 0 && stateCopy[i][k - 1] === null)k--;\n                if (k !== j) {\n                    stateCopy[i][k] = stateCopy[i][j];\n                    stateCopy[i][j] = null;\n                    this.moved = true;\n                    transitions.push({\n                        id: stateCopy[i][k].id,\n                        type: \"move\",\n                        from: [\n                            i,\n                            j\n                        ],\n                        to: [\n                            i,\n                            k\n                        ]\n                    });\n                }\n                if (k > 0 && stateCopy[i][k - 1] !== null && stateCopy[i][k].value === stateCopy[i][k - 1].value && !merged[k - 1]) {\n                    transitions.push({\n                        id: stateCopy[i][k].id,\n                        type: \"merge\",\n                        from: [\n                            i,\n                            k\n                        ],\n                        to: [\n                            i,\n                            k - 1\n                        ],\n                        mergeIntoId: stateCopy[i][k - 1].id\n                    });\n                    stateCopy[i][k - 1].value *= 2;\n                    this.score += stateCopy[i][k - 1].value;\n                    stateCopy[i][k] = null;\n                    merged[k - 1] = true;\n                    this.moved = true;\n                }\n            }\n        }\n        return {\n            newState: stateCopy,\n            transitions: transitions,\n            moved: this.moved\n        };\n    }\n    moveRight() {\n        const stateCopy = this.state.map((row)=>{\n            return row.map((cell)=>cell ? {\n                    ...cell\n                } : null);\n        });\n        const transitions = [];\n        this.moved = false;\n        for(let i = 0; i < stateCopy.length; i++){\n            const merged = [\n                false,\n                false,\n                false,\n                false\n            ];\n            for(let j = stateCopy[i].length - 1; j >= 0; j--){\n                if (stateCopy[i][j] === null) continue;\n                let k = j;\n                while(k < stateCopy[i].length - 1 && stateCopy[i][k + 1] === null)k++;\n                if (k !== j) {\n                    stateCopy[i][k] = stateCopy[i][j];\n                    stateCopy[i][j] = null;\n                    this.moved = true;\n                    transitions.push({\n                        id: stateCopy[i][k].id,\n                        type: \"move\",\n                        from: [\n                            i,\n                            j\n                        ],\n                        to: [\n                            i,\n                            k\n                        ]\n                    });\n                }\n                if (k < stateCopy[i].length - 1 && stateCopy[i][k + 1] !== null && stateCopy[i][k].value === stateCopy[i][k + 1].value && !merged[k + 1]) {\n                    transitions.push({\n                        id: stateCopy[i][k].id,\n                        type: \"merge\",\n                        from: [\n                            i,\n                            k\n                        ],\n                        to: [\n                            i,\n                            k + 1\n                        ],\n                        mergeIntoId: stateCopy[i][k + 1].id\n                    });\n                    stateCopy[i][k + 1].value *= 2;\n                    this.score += stateCopy[i][k + 1].value;\n                    stateCopy[i][k] = null;\n                    merged[k + 1] = true;\n                    this.moved = true;\n                }\n            }\n        }\n        return {\n            newState: stateCopy,\n            transitions: transitions,\n            moved: this.moved\n        };\n    }\n    moveUp() {\n        const stateCopy = this.state.map((row)=>{\n            return row.map((cell)=>cell ? {\n                    ...cell\n                } : null);\n        });\n        const transitions = [];\n        this.moved = false;\n        for(let j = 0; j < stateCopy[0].length; j++){\n            const merged = [\n                false,\n                false,\n                false,\n                false\n            ];\n            for(let i = 0; i < stateCopy.length; i++){\n                if (stateCopy[i][j] === null) continue;\n                let k = i;\n                while(k > 0 && stateCopy[k - 1][j] === null)k--;\n                if (k !== i) {\n                    stateCopy[k][j] = stateCopy[i][j];\n                    stateCopy[i][j] = null;\n                    this.moved = true;\n                    transitions.push({\n                        id: stateCopy[k][j].id,\n                        type: \"move\",\n                        from: [\n                            i,\n                            j\n                        ],\n                        to: [\n                            k,\n                            j\n                        ]\n                    });\n                }\n                if (k > 0 && stateCopy[k - 1][j] !== null && stateCopy[k][j].value === stateCopy[k - 1][j].value && !merged[k - 1]) {\n                    transitions.push({\n                        id: stateCopy[k][j].id,\n                        type: \"merge\",\n                        from: [\n                            k,\n                            j\n                        ],\n                        to: [\n                            k - 1,\n                            j\n                        ],\n                        mergeIntoId: stateCopy[k - 1][j].id\n                    });\n                    stateCopy[k - 1][j].value *= 2;\n                    this.score += stateCopy[k - 1][j].value;\n                    stateCopy[k][j] = null;\n                    merged[k - 1] = true;\n                    this.moved = true;\n                }\n            }\n        }\n        return {\n            newState: stateCopy,\n            transitions: transitions,\n            moved: this.moved\n        };\n    }\n    moveDown() {\n        const stateCopy = this.state.map((row)=>{\n            return row.map((cell)=>cell ? {\n                    ...cell\n                } : null);\n        });\n        const transitions = [];\n        this.moved = false;\n        for(let j = 0; j < stateCopy[0].length; j++){\n            const merged = [\n                false,\n                false,\n                false,\n                false\n            ];\n            for(let i = stateCopy.length - 1; i >= 0; i--){\n                if (stateCopy[i][j] === null) continue;\n                let k = i;\n                while(k < stateCopy.length - 1 && stateCopy[k + 1][j] === null)k++;\n                if (k !== i) {\n                    stateCopy[k][j] = stateCopy[i][j];\n                    stateCopy[i][j] = null;\n                    this.moved = true;\n                    transitions.push({\n                        id: stateCopy[k][j].id,\n                        type: \"move\",\n                        from: [\n                            i,\n                            j\n                        ],\n                        to: [\n                            k,\n                            j\n                        ]\n                    });\n                }\n                if (k < stateCopy.length - 1 && stateCopy[k + 1][j] !== null && stateCopy[k][j].value === stateCopy[k + 1][j].value && !merged[k + 1]) {\n                    transitions.push({\n                        id: stateCopy[k][j].id,\n                        type: \"merge\",\n                        from: [\n                            k,\n                            j\n                        ],\n                        to: [\n                            k + 1,\n                            j\n                        ],\n                        mergeIntoId: stateCopy[k + 1][j].id\n                    });\n                    stateCopy[k + 1][j].value *= 2;\n                    this.score += stateCopy[k + 1][j].value;\n                    stateCopy[k][j] = null;\n                    merged[k + 1] = true;\n                    this.moved = true;\n                }\n            }\n        }\n        return {\n            newState: stateCopy,\n            transitions: transitions,\n            moved: this.moved\n        };\n    }\n    defineStep([rowIndex, columnIndex], direction) {\n        const currentItem = this.state[rowIndex][columnIndex];\n        const currentRow = this.state[rowIndex];\n        const currentColumn = this.state.map((row)=>row[columnIndex]);\n        let step = 0;\n        switch(direction){\n            case \"left\":\n                for(let i = columnIndex - 1; i >= 0; i--){\n                    if (currentRow[i] === 0) step++;\n                    else if (currentRow[i] === currentItem) return step + 1;\n                    else break;\n                }\n                return step;\n            case \"right\":\n                for(let i = columnIndex + 1; i < currentRow.length; i++){\n                    if (currentRow[i] === 0) step++;\n                    else if (currentRow[i] === currentItem) return step + 1;\n                    else break;\n                }\n                return step;\n            case \"up\":\n                for(let i = rowIndex - 1; i >= 0; i--){\n                    if (currentColumn[i] === 0) step++;\n                    else if (currentColumn[i] === currentItem) return step + 1;\n                    else break;\n                }\n                return step;\n            case \"down\":\n                for(let i = rowIndex + 1; i < currentColumn.length; i++){\n                    if (currentColumn[i] === 0) step++;\n                    else if (currentColumn[i] === currentItem) return step + 1;\n                    else break;\n                }\n                return step;\n        }\n    }\n    start() {\n        this.born();\n        this.born();\n        this.status = \"playing\";\n    }\n    restart() {\n        this.state = [\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ]\n        ];\n        this.status = \"idle\";\n        this.score = 0;\n        this.nextCellId = 1;\n    }\n    check() {\n        for(let i = 0; i < this.state.length; i++)for(let j = 0; j < this.state[i].length; j++){\n            const current = this.state[i][j];\n            if (current !== null && current.value >= 2048) {\n                this.status = \"win\";\n                return;\n            }\n            if (!current) return;\n            if (j < this.state[i].length - 1) {\n                const rightCell = this.state[i][j + 1];\n                if (rightCell !== null && rightCell.value === current.value) return;\n            }\n            if (i < this.state.length - 1) {\n                const downCell = this.state[i + 1][j];\n                if (downCell !== null && downCell.value === current.value) return;\n            }\n        }\n        this.status = \"lose\";\n    }\n    born() {\n        const emptyCells = [];\n        for(let i = 0; i < 4; i++){\n            for(let j = 0; j < 4; j++)if (this.state[i][j] === null) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        if (emptyCells.length === 0) return;\n        const [row, col] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        const value = Math.random() < 0.1 ? 4 : 2;\n        const clearStateCell = {\n            id: this.nextCellId++,\n            value: value\n        };\n        this.state[row][col] = clearStateCell;\n        const spawnTransition = {\n            id: clearStateCell.id,\n            type: \"spawn\",\n            to: [\n                row,\n                col\n            ],\n            value: value\n        };\n        return spawnTransition;\n    }\n    performMove(direction) {\n        let moveResult;\n        switch(direction){\n            case \"LEFT\":\n                moveResult = this.moveLeft();\n                break;\n            case \"RIGHT\":\n                moveResult = this.moveRight();\n                break;\n            case \"UP\":\n                moveResult = this.moveUp();\n                break;\n            case \"DOWN\":\n                moveResult = this.moveDown();\n                break;\n            default:\n                return {\n                    newState: this.state,\n                    transitions: [],\n                    moved: false\n                };\n        }\n        if (moveResult.moved) {\n            this.state = moveResult.newState;\n            const spawnTransition = this.born();\n            moveResult.transitions.push(spawnTransition);\n            this.check();\n        }\n        return moveResult;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$field = document.querySelector(\".game-field\");\nZ;\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$bestScoreElement = document.querySelector(\".best-score\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$ANIMATION_DURATION = 100;\nconst $09e991522ca7e64e$var$CELL_OFFSET = 83;\nlet $09e991522ca7e64e$var$prevMoveEnded = true;\n$09e991522ca7e64e$var$bestScoreElement.textContent = localStorage.getItem(\"bestScore\") || 0;\nfunction $09e991522ca7e64e$var$saveScore() {\n    localStorage.setItem(\"bestScore\", $09e991522ca7e64e$var$game.getScore());\n}\nfunction $09e991522ca7e64e$var$animateAndRender(result) {\n    result.transitions.forEach((t)=>{\n        const cell = document.getElementById(`cell-${t.id}`);\n        if (!cell) return;\n        if (t.type === \"move\" || t.type === \"merge\") cell.style.transform = `translate(${t.to[1] * $09e991522ca7e64e$var$CELL_OFFSET}px, ${t.to[0] * $09e991522ca7e64e$var$CELL_OFFSET}px)`;\n    });\n    setTimeout(()=>{\n        result.transitions.forEach((t)=>{\n            if (t.type === \"merge\") {\n                const disappearingCell = document.getElementById(`cell-${t.id}`);\n                const cell = document.getElementById(`cell-${t.mergeIntoId}`);\n                if (disappearingCell) disappearingCell.remove();\n                if (cell) {\n                    const cellObject = $09e991522ca7e64e$var$game.state[t.to[0]][t.to[1]];\n                    const newValue = cellObject ? cellObject.value : 0;\n                    cell.textContent = newValue;\n                    cell.className = `cell cell--${cell.textContent}`;\n                }\n            }\n            if (t.type === \"spawn\") {\n                const cell = $09e991522ca7e64e$var$createCellElement(t.value, t.to[0], t.to[1], t.id);\n                $09e991522ca7e64e$var$field.appendChild(cell);\n            }\n        });\n        $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n        if ($09e991522ca7e64e$var$game.getScore() > parseInt($09e991522ca7e64e$var$bestScoreElement.textContent)) {\n            $09e991522ca7e64e$var$bestScoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n            $09e991522ca7e64e$var$saveScore();\n        }\n        if ($09e991522ca7e64e$var$game.status === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n        if ($09e991522ca7e64e$var$game.status === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$prevMoveEnded = true;\n    }, $09e991522ca7e64e$var$ANIMATION_DURATION);\n}\nfunction $09e991522ca7e64e$var$gameCallback(e) {\n    if ([\n        \"ArrowLeft\",\n        \"ArrowRight\",\n        \"ArrowUp\",\n        \"ArrowDown\"\n    ].includes(e.key)) e.preventDefault();\n    if ($09e991522ca7e64e$var$game.status !== \"playing\") return;\n    if ($09e991522ca7e64e$var$prevMoveEnded) {\n        let result;\n        let direction = null;\n        if (e.type === \"keydown\" && e.key && [\n            \"ArrowLeft\",\n            \"ArrowRight\",\n            \"ArrowUp\",\n            \"ArrowDown\"\n        ].includes(e.key)) direction = e.key.replace(\"Arrow\", \"\").toUpperCase();\n        if ([\n            \"LEFT\",\n            \"RIGHT\",\n            \"UP\",\n            \"DOWN\"\n        ].includes(direction)) result = $09e991522ca7e64e$var$game.performMove(direction);\n        else return;\n        if (result.moved) {\n            $09e991522ca7e64e$var$prevMoveEnded = false;\n            $09e991522ca7e64e$var$animateAndRender(result);\n        }\n    }\n}\nfunction $09e991522ca7e64e$var$createCellElement(value, row, col, id) {\n    const cell = document.createElement(\"div\");\n    cell.id = `cell-${id}`;\n    cell.className = `cell cell--${value}`;\n    cell.textContent = value;\n    cell.style.transform = `translate(${col * 83}px, ${row * 83}px)`;\n    return cell;\n}\nfunction $09e991522ca7e64e$var$clearBoard() {\n    const cells = $09e991522ca7e64e$var$field.querySelectorAll(\".cell\");\n    cells.forEach((cell)=>cell.remove());\n}\nfunction $09e991522ca7e64e$var$initialiseBoard(boardState) {\n    for(let i = 0; i < boardState.length; i++)for(let j = 0; j < boardState[i].length; j++){\n        const cellObj = boardState[i][j];\n        const value = cellObj ? cellObj.value : 0;\n        if (value !== 0) {\n            const cell = $09e991522ca7e64e$var$createCellElement(value, i, j, cellObj.id);\n            $09e991522ca7e64e$var$field.appendChild(cell);\n        }\n    }\n}\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.status !== \"idle\") {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$clearBoard();\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n        $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n        $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$gameCallback);\n        if ($09e991522ca7e64e$var$game.status === \"idle\" && $09e991522ca7e64e$var$button.textContent === \"Start\") return;\n    }\n    if ($09e991522ca7e64e$var$button.textContent === \"Start\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$initialiseBoard($09e991522ca7e64e$var$game.getState());\n        $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n        document.addEventListener(\"keydown\", $09e991522ca7e64e$var$gameCallback);\n    }\n});\n\n\n//# sourceMappingURL=index.6c63ed25.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\n\nconst game = new Game();\nconst button = document.querySelector('.button');\n\nconst field = document.querySelector('.game-field');Z\n\nconst scoreElement = document.querySelector('.game-score');\nconst bestScoreElement = document.querySelector('.best-score');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nconst ANIMATION_DURATION = 100;\nconst CELL_OFFSET = 83;\n\nlet prevMoveEnded = true;\n\nbestScoreElement.textContent = localStorage.getItem('bestScore') || 0;\n\nfunction saveScore() {\n  localStorage.setItem('bestScore', game.getScore());\n}\n\nfunction animateAndRender(result) {\n  result.transitions.forEach((t) => {\n    const cell = document.getElementById(`cell-${t.id}`);\n\n    if (!cell) {\n      return;\n    }\n\n    if (t.type === 'move' || t.type === 'merge') {\n      cell.style.transform = `translate(${t.to[1] * CELL_OFFSET}px, ${t.to[0] * CELL_OFFSET}px)`;\n    }\n  });\n\n  setTimeout(() => {\n    result.transitions.forEach((t) => {\n      if (t.type === 'merge') {\n        const disappearingCell = document.getElementById(`cell-${t.id}`);\n        const cell = document.getElementById(`cell-${t.mergeIntoId}`);\n\n        if (disappearingCell) {\n          disappearingCell.remove();\n        }\n\n        if (cell) {\n          const cellObject = game.state[t.to[0]][t.to[1]];\n          const newValue = cellObject ? cellObject.value : 0;\n\n          cell.textContent = newValue;\n          cell.className = `cell cell--${cell.textContent}`;\n        }\n      }\n\n      if (t.type === 'spawn') {\n        const cell = createCellElement(t.value, t.to[0], t.to[1], t.id);\n\n        field.appendChild(cell);\n      }\n    });\n\n    scoreElement.textContent = game.getScore();\n\n    if (game.getScore() > parseInt(bestScoreElement.textContent)) {\n      bestScoreElement.textContent = game.getScore();\n      saveScore();\n    }\n\n    if (game.status === 'lose') {\n      messageLose.classList.remove('hidden');\n    }\n\n    if (game.status === 'win') {\n      messageWin.classList.remove('hidden');\n    }\n\n    prevMoveEnded = true;\n  }, ANIMATION_DURATION);\n}\n\nfunction gameCallback(e) {\n  if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(e.key)) {\n    e.preventDefault();\n  }\n\n  if (game.status !== 'playing') {\n    return;\n  }\n\n  if (prevMoveEnded) {\n    let result;\n    let direction = null;\n\n    if (\n      e.type === 'keydown' &&\n      e.key &&\n      ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(e.key)\n    ) {\n      direction = e.key.replace('Arrow', '').toUpperCase();\n    }\n\n    if (['LEFT', 'RIGHT', 'UP', 'DOWN'].includes(direction)) {\n      result = game.performMove(direction);\n    } else {\n      return;\n    }\n\n    if (result.moved) {\n      prevMoveEnded = false;\n\n      animateAndRender(result);\n    } else {\n    }\n  }\n}\n\nfunction createCellElement(value, row, col, id) {\n  const cell = document.createElement('div');\n\n  cell.id = `cell-${id}`;\n  cell.className = `cell cell--${value}`;\n  cell.textContent = value;\n  cell.style.transform = `translate(${col * 83}px, ${row * 83}px)`;\n\n  return cell;\n}\n\nfunction clearBoard() {\n  const cells = field.querySelectorAll('.cell');\n\n  cells.forEach((cell) => cell.remove());\n}\n\nfunction initialiseBoard(boardState) {\n  for (let i = 0; i < boardState.length; i++) {\n    for (let j = 0; j < boardState[i].length; j++) {\n      const cellObj = boardState[i][j];\n      const value = cellObj ? cellObj.value : 0;\n\n      if (value !== 0) {\n        const cell = createCellElement(value, i, j, cellObj.id);\n\n        field.appendChild(cell);\n      }\n    }\n  }\n}\n\nbutton.addEventListener('click', () => {\n  if (game.status !== 'idle') {\n    game.restart();\n    clearBoard();\n\n    button.textContent = 'Start';\n    button.classList.remove('restart');\n    button.classList.add('start');\n\n    scoreElement.textContent = game.getScore();\n\n    messageStart.classList.remove('hidden');\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n\n    document.removeEventListener('keydown', gameCallback);\n\n    if (game.status === 'idle' && button.textContent === 'Start') {\n      return;\n    }\n  }\n\n  if (button.textContent === 'Start') {\n    game.start();\n\n    button.textContent = 'Restart';\n    button.classList.remove('start');\n    button.classList.add('restart');\n\n    messageStart.classList.add('hidden');\n\n    initialiseBoard(game.getState());\n\n    scoreElement.textContent = game.getScore();\n\n    document.addEventListener('keydown', gameCallback);\n  }\n});\n","'use strict';\n\nclass Game {\n  constructor() {\n    this.state = [\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n    ];\n    this.score = 0;\n    this.status = 'idle';\n    this.moved = false;\n    this.nextCellId = 1;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  moveLeft() {\n    const stateCopy = this.state.map((row) => {\n      return row.map((cell) => (cell ? { ...cell } : null));\n    });\n    const transitions = [];\n\n    this.moved = false;\n\n    for (let i = 0; i < stateCopy.length; i++) {\n      const merged = [false, false, false, false];\n\n      for (let j = 0; j < stateCopy[i].length; j++) {\n        if (stateCopy[i][j] === null) {\n          continue;\n        }\n\n        let k = j;\n\n        while (k > 0 && stateCopy[i][k - 1] === null) {\n          k--;\n        }\n\n        if (k !== j) {\n          stateCopy[i][k] = stateCopy[i][j];\n          stateCopy[i][j] = null;\n          this.moved = true;\n\n          transitions.push({\n            id: stateCopy[i][k].id,\n            type: 'move',\n            from: [i, j],\n            to: [i, k],\n          });\n        }\n\n        if (\n          k > 0 &&\n          stateCopy[i][k - 1] !== null &&\n          stateCopy[i][k].value === stateCopy[i][k - 1].value &&\n          !merged[k - 1]\n        ) {\n          transitions.push({\n            id: stateCopy[i][k].id,\n            type: 'merge',\n            from: [i, k],\n            to: [i, k - 1],\n            mergeIntoId: stateCopy[i][k - 1].id,\n          });\n\n          stateCopy[i][k - 1].value *= 2;\n          this.score += stateCopy[i][k - 1].value;\n          stateCopy[i][k] = null;\n          merged[k - 1] = true;\n          this.moved = true;\n        }\n      }\n    }\n\n    return { newState: stateCopy, transitions, moved: this.moved };\n  }\n\n  moveRight() {\n    const stateCopy = this.state.map((row) => {\n      return row.map((cell) => (cell ? { ...cell } : null));\n    });\n    const transitions = [];\n\n    this.moved = false;\n\n    for (let i = 0; i < stateCopy.length; i++) {\n      const merged = [false, false, false, false];\n\n      for (let j = stateCopy[i].length - 1; j >= 0; j--) {\n        if (stateCopy[i][j] === null) {\n          continue;\n        }\n\n        let k = j;\n\n        while (k < stateCopy[i].length - 1 && stateCopy[i][k + 1] === null) {\n          k++;\n        }\n\n        if (k !== j) {\n          stateCopy[i][k] = stateCopy[i][j];\n          stateCopy[i][j] = null;\n          this.moved = true;\n\n          transitions.push({\n            id: stateCopy[i][k].id,\n            type: 'move',\n            from: [i, j],\n            to: [i, k],\n          });\n        }\n\n        if (\n          k < stateCopy[i].length - 1 &&\n          stateCopy[i][k + 1] !== null &&\n          stateCopy[i][k].value === stateCopy[i][k + 1].value &&\n          !merged[k + 1]\n        ) {\n          transitions.push({\n            id: stateCopy[i][k].id,\n            type: 'merge',\n            from: [i, k],\n            to: [i, k + 1],\n            mergeIntoId: stateCopy[i][k + 1].id,\n          });\n\n          stateCopy[i][k + 1].value *= 2;\n          this.score += stateCopy[i][k + 1].value;\n          stateCopy[i][k] = null;\n          merged[k + 1] = true;\n          this.moved = true;\n        }\n      }\n    }\n\n    return { newState: stateCopy, transitions, moved: this.moved };\n  }\n\n  moveUp() {\n    const stateCopy = this.state.map((row) => {\n      return row.map((cell) => (cell ? { ...cell } : null));\n    });\n    const transitions = [];\n\n    this.moved = false;\n\n    for (let j = 0; j < stateCopy[0].length; j++) {\n      const merged = [false, false, false, false];\n\n      for (let i = 0; i < stateCopy.length; i++) {\n        if (stateCopy[i][j] === null) {\n          continue;\n        }\n\n        let k = i;\n\n        while (k > 0 && stateCopy[k - 1][j] === null) {\n          k--;\n        }\n\n        if (k !== i) {\n          stateCopy[k][j] = stateCopy[i][j];\n          stateCopy[i][j] = null;\n          this.moved = true;\n\n          transitions.push({\n            id: stateCopy[k][j].id,\n            type: 'move',\n            from: [i, j],\n            to: [k, j],\n          });\n        }\n\n        if (\n          k > 0 &&\n          stateCopy[k - 1][j] !== null &&\n          stateCopy[k][j].value === stateCopy[k - 1][j].value &&\n          !merged[k - 1]\n        ) {\n          transitions.push({\n            id: stateCopy[k][j].id,\n            type: 'merge',\n            from: [k, j],\n            to: [k - 1, j],\n            mergeIntoId: stateCopy[k - 1][j].id,\n          });\n\n          stateCopy[k - 1][j].value *= 2;\n          this.score += stateCopy[k - 1][j].value;\n          stateCopy[k][j] = null;\n          merged[k - 1] = true;\n          this.moved = true;\n        }\n      }\n    }\n\n    return { newState: stateCopy, transitions, moved: this.moved };\n  }\n\n  moveDown() {\n    const stateCopy = this.state.map((row) => {\n      return row.map((cell) => (cell ? { ...cell } : null));\n    });\n    const transitions = [];\n\n    this.moved = false;\n\n    for (let j = 0; j < stateCopy[0].length; j++) {\n      const merged = [false, false, false, false];\n\n      for (let i = stateCopy.length - 1; i >= 0; i--) {\n        if (stateCopy[i][j] === null) {\n          continue;\n        }\n\n        let k = i;\n\n        while (k < stateCopy.length - 1 && stateCopy[k + 1][j] === null) {\n          k++;\n        }\n\n        if (k !== i) {\n          stateCopy[k][j] = stateCopy[i][j];\n          stateCopy[i][j] = null;\n          this.moved = true;\n\n          transitions.push({\n            id: stateCopy[k][j].id,\n            type: 'move',\n            from: [i, j],\n            to: [k, j],\n          });\n        }\n\n        if (\n          k < stateCopy.length - 1 &&\n          stateCopy[k + 1][j] !== null &&\n          stateCopy[k][j].value === stateCopy[k + 1][j].value &&\n          !merged[k + 1]\n        ) {\n          transitions.push({\n            id: stateCopy[k][j].id,\n            type: 'merge',\n            from: [k, j],\n            to: [k + 1, j],\n            mergeIntoId: stateCopy[k + 1][j].id,\n          });\n\n          stateCopy[k + 1][j].value *= 2;\n          this.score += stateCopy[k + 1][j].value;\n          stateCopy[k][j] = null;\n          merged[k + 1] = true;\n          this.moved = true;\n        }\n      }\n    }\n\n    return { newState: stateCopy, transitions, moved: this.moved };\n  }\n\n  defineStep([rowIndex, columnIndex], direction) {\n    const currentItem = this.state[rowIndex][columnIndex];\n    const currentRow = this.state[rowIndex];\n    const currentColumn = this.state.map((row) => row[columnIndex]);\n    let step = 0;\n\n    switch (direction) {\n      case 'left':\n        for (let i = columnIndex - 1; i >= 0; i--) {\n          if (currentRow[i] === 0) {\n            step++;\n          } else if (currentRow[i] === currentItem) {\n            return step + 1;\n          } else {\n            break;\n          }\n        }\n\n        return step;\n      case 'right':\n        for (let i = columnIndex + 1; i < currentRow.length; i++) {\n          if (currentRow[i] === 0) {\n            step++;\n          } else if (currentRow[i] === currentItem) {\n            return step + 1;\n          } else {\n            break;\n          }\n        }\n\n        return step;\n      case 'up':\n        for (let i = rowIndex - 1; i >= 0; i--) {\n          if (currentColumn[i] === 0) {\n            step++;\n          } else if (currentColumn[i] === currentItem) {\n            return step + 1;\n          } else {\n            break;\n          }\n        }\n\n        return step;\n      case 'down':\n        for (let i = rowIndex + 1; i < currentColumn.length; i++) {\n          if (currentColumn[i] === 0) {\n            step++;\n          } else if (currentColumn[i] === currentItem) {\n            return step + 1;\n          } else {\n            break;\n          }\n        }\n\n        return step;\n    }\n  }\n\n  start() {\n    this.born();\n    this.born();\n    this.status = 'playing';\n  }\n\n  restart() {\n    this.state = [\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n    ];\n    this.status = 'idle';\n    this.score = 0;\n    this.nextCellId = 1;\n  }\n\n  check() {\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        const current = this.state[i][j];\n\n        if (current !== null && current.value >= 2048) {\n          this.status = 'win';\n\n          return;\n        }\n\n        if (!current) {\n          return;\n        }\n\n        if (j < this.state[i].length - 1) {\n          const rightCell = this.state[i][j + 1];\n\n          if (rightCell !== null && rightCell.value === current.value) {\n            return;\n          }\n        }\n\n        if (i < this.state.length - 1) {\n          const downCell = this.state[i + 1][j];\n\n          if (downCell !== null && downCell.value === current.value) {\n            return;\n          }\n        }\n      }\n    }\n\n    this.status = 'lose';\n  }\n\n  born() {\n    const emptyCells = [];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.state[i][j] === null) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const [row, col] =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    const value = Math.random() < 0.1 ? 4 : 2;\n    const clearStateCell = { id: this.nextCellId++, value };\n\n    this.state[row][col] = clearStateCell;\n\n    const spawnTransition = {\n      id: clearStateCell.id,\n      type: 'spawn',\n      to: [row, col],\n      value,\n    };\n\n    return spawnTransition;\n  }\n\n  performMove(direction) {\n    let moveResult;\n\n    switch (direction) {\n      case 'LEFT':\n        moveResult = this.moveLeft();\n        break;\n      case 'RIGHT':\n        moveResult = this.moveRight();\n        break;\n      case 'UP':\n        moveResult = this.moveUp();\n        break;\n      case 'DOWN':\n        moveResult = this.moveDown();\n        break;\n      default:\n        return { newState: this.state, transitions: [], moved: false };\n    }\n\n    if (moveResult.moved) {\n      this.state = moveResult.newState;\n\n      const spawnTransition = this.born();\n\n      moveResult.transitions.push(spawnTransition);\n      this.check();\n    }\n\n    return moveResult;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","state","score","status","moved","nextCellId","getState","getScore","getStatus","moveLeft","stateCopy","map","row","cell","transitions","i","length","merged","j","k","push","id","type","from","to","value","mergeIntoId","newState","moveRight","moveUp","moveDown","defineStep","rowIndex","columnIndex","direction","currentItem","currentRow","currentColumn","step","start","born","restart","check","current","rightCell","downCell","emptyCells","col","Math","floor","random","clearStateCell","performMove","moveResult","spawnTransition","$09e991522ca7e64e$var$button","document","querySelector","$09e991522ca7e64e$var$field","Z","$09e991522ca7e64e$var$scoreElement","$09e991522ca7e64e$var$bestScoreElement","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$prevMoveEnded","$09e991522ca7e64e$var$gameCallback","e","includes","key","preventDefault","result","replace","toUpperCase","forEach","t","getElementById","style","transform","setTimeout","disappearingCell","remove","cellObject","newValue","textContent","className","$09e991522ca7e64e$var$createCellElement","appendChild","parseInt","localStorage","setItem","classList","createElement","getItem","addEventListener","cells","querySelectorAll","add","removeEventListener","$09e991522ca7e64e$var$initialiseBoard","boardState","cellObj"],"version":3,"file":"index.6c63ed25.js.map"}